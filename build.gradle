buildscript {
  repositories {
    mavenCentral()
    maven { url "http://repo.maven.apache.org/maven2" }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
  }
  dependencies {
    classpath 'com.cinnober.gradle:semver-git:2.4.0'
  }
}
plugins {
  id 'com.github.kt3k.coveralls' version '2.8.1'
  id 'io.codearte.nexus-staging' version '0.9.0'
  id "io.freefair.lombok" version "3.6.6"
  id "org.checkerframework" version "0.3.18"
}

project.ext.isCiBuild = System.env.CI == 'true'

project.ext.publishEnabled = !isCiBuild &&
  project.hasProperty('yubicoPublish') && project.yubicoPublish &&
  project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')

if (publishEnabled) {
  nexusStaging {
    username = ossrhUsername
    password = ossrhPassword
    stagingProfileId = '6c61426e6529d'
  }
}

wrapper {
  gradleVersion = '5.4'
}

allprojects {
  apply plugin: 'com.cinnober.gradle.semver-git'
  apply plugin: 'idea'

  group = 'com.yubico'

  ext.snapshotSuffix = "<count>.g<sha>-SNAPSHOT<dirty>"
  ext.dirtyMarker = "-DIRTY"

  idea.module {
    downloadJavadoc = true
    downloadSources = true
  }
}

subprojects {
  repositories {
    mavenLocal()

    maven { url "http://repo.maven.apache.org/maven2" }
  }
}

evaluationDependsOnChildren()

task assembleJavadoc(type: Sync) {
  from("docs/index.html") {
    expand project.properties
  }
  destinationDir = file("${rootProject.buildDir}/javadoc")
}

subprojects { project ->

  sourceCompatibility = 1.8
  targetCompatibility = 1.8


  tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
  }

  tasks.withType(AbstractArchiveTask) {
    from(rootProject.file('COPYING'))
    preserveFileTimestamps = false
    reproducibleFileOrder = true
  }

  test {
    failFast = true

    testLogging {
      showStandardStreams = isCiBuild
    }
  }

  if (project.hasProperty('publishMe') && project.publishMe) {
    task sourcesJar(type: Jar) {
      archiveClassifier = 'sources'
      from sourceSets.main.allSource
    }

    javadoc {
      options.encoding = 'UTF-8'
      options.addStringOption('charset', 'UTF-8')
    }

    task javadocJar(type: Jar) {
      archiveClassifier = 'javadoc'
      from javadoc
    }

    rootProject.tasks.assembleJavadoc {
      dependsOn javadoc
      inputs.dir javadoc.destinationDir
      from(javadoc.destinationDir) {
        into project.name
      }
    }
  }

  if (publishEnabled && project.hasProperty('publishMe') && project.publishMe) {

    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    publishing {
      publications {
        jars(MavenPublication) {
          from components.java
          artifact javadocJar
          artifact sourcesJar

          pom {
            name = project.name
            description = project.description
            url = 'https://developers.yubico.com/java-webauthn-server/'

            developers {
              developer {
                id = 'emil'
                name = 'Emil Lundberg'
                email = 'emil@yubico.com'
              }
            }

            licenses {
              license {
                name = 'BSD-license'
                comments = 'Revised 2-clause BSD license'
              }
            }

            scm {
              url = 'scm:git:git://github.com/Yubico/java-webauthn-server.git'
              connection = 'scm:git:git://github.com/Yubico/java-webauthn-server.git'
              developerConnection = 'scm:git:ssh://git@github.com/Yubico/java-webauthn-server.git'
              tag = 'HEAD'
            }
          }
        }
      }

      repositories {
        maven {
          name = "sonatypeNexus"
          url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
          credentials {
            username ossrhUsername
            password ossrhPassword
          }
        }
      }
    }

    signing {
      useGpgCmd()
      sign publishing.publications.jars
    }
  }
}

task pitestMerge(type: com.yubico.gradle.pitest.tasks.PitestMergeTask)

coveralls {
  sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
}
tasks.coveralls {
  inputs.files pitestMerge.outputs.files
}

subprojects { subproject ->
  checkerFramework {
      skipVersionCheck = true
      checkers = ['org.checkerframework.checker.objectconstruction.ObjectConstructionChecker']
      extraJavacArgs = ['-AsuppressWarnings=type.anno.before']
  }
  dependencies {
      checkerFramework 'net.sridharan.objectconstruction:object-construction-checker:0.1.1'
      implementation 'net.sridharan.objectconstruction:object-construction-qual:0.1.1'
  }
}
